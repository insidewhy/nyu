!html
head {
    %title nyu - PEG based parser generator
    link(rel=stylesheet, type=text/css, href=css/global.css)
}

!body

%h1 Nyu

#links {
    links:
    %a(href=http://github.com/tuxjay/nyu) source
    %a(href=https://sourceforge.net/projects/nyu/files/) download
    %a(href=tutorial/index.html) tutorial
    %a(href=changelog.html) changelog
}

%p {
    nyu is a powerful and flexible parser generator based on the | %a(href=http://chilon.net/papers/tbpeg.pdf)TBPEG | (tree building parsing expression grammar) notation. nyu grammars describe both how to parse data and how to create custom ASTs at the same time. PEG rules have been extended and modified where appropriate and new operators have been added to the PEG notation to make this task feasible.
}

%p {
    nyu outputs parsers that take advantage of the | %a(href=http://chilon.net/library.html) chilon::parser | meta-programming library for C++0x. The generated code is very neat and there is an almost one to one mapping between the structure of an input grammar and the generated parser.
}

%p {
    The following is an example that shows how a list of sums can be represented in nyu and the kind of ASTs it would build. There are more examples in the | %a(href=tutorial.html) "tutorial."
}

%h2 An example grammar - basic maths.
%p The following Grammar stores list&lt; variant&lt;Addition, Product, int&gt; &gt;
%pre <<EOF
    @grammar mathematics
    Spacing   <- \s
    Number    < int - [0-9]+
    Product   <= Number  |% "*"
    Addition  <= Product |% "+"
    Grammar   <- Addition+
EOF

%p This table demonstrates some text parsed with the above grammar and a short-hand representation of the AST stored (&ldquo;[ .. ]&rdquo; for lists, variants are expanded).
%table {
    %tr {
        %th Parse Data
        %th AST
    }
    %tr {
        %td &ldquo;4 + 2&rdquo;
        %td [ Addition[4, 2] ]
    }
    %tr {
        %td &ldquo;4&rdquo;
        %td [ 4 ]
    }
    %tr {
        %td &ldquo;4 7&rdquo;
        %td [ 4, 7 ]
    }
    %tr {
        %td &ldquo;4 + 2 * 7&rdquo;
        %td [ Addition[4, Product[2, 7]] ]
    }
}


%h2 Further Reading

%p { The | %a(href=tutorial/index.html) tutorial | is currently missing detail on many operator types and missing information on some of the advanced features of nyu but is in the process of rapid expansion. The | %a(href=http://chilon.net/tutorial/index.html) chilon::parser tutorial | is a good reference to the chilon::parser library that the generated parsers use. The syntax of nyu is described in the paper on tree building parser expression grammars which can be found | %a(href=http://chilon.net/papers/tbpeg.pdf) "here." | nyu also includes support for storing hashed containers which is not described in this paper. }

%h2 Contributing

%div Wanted: Code, bug reports, suggestions and art for the website.
%div E-mail: nyu (@) chilon.net.
%div { IRC Channel: #nyah on | %a(href=irc://irc.freenode.net/nyah) "irc.freenode.net" }
