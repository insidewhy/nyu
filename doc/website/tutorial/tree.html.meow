!html
head {
    %title nyu - PEG based parser generator tutorial
    link(rel=stylesheet, type=text/css, href=../css/global.css)
}

!body

%h1 Tutorial - Using Tree Operators

%pre <<EOF
    @grammar mathematics
    Spacing   <- \s+
    Number    <- [0-9]+

    // |% parses the same data as %+ but stores parsed data differently.
    // The node type is only created if the join matches more than one item,
    // otherwise it stores the item to the left of the |%. The resulting type
    // of the whole expression is a variant that can store either type.
    // In this case Product stores variant<range, Product> which is populated
    // with range or Product depending on whether Number matches one
    // or many times.
    Product   <= Number  |% "*"

    // Node parsers that use |+, |* or |% cannot refer to themselves.

    // Addition stores: variant<Addition, storage type of Product>
    //          expand: variant<Addition, variant<Product, range>>
    //        collapse: variant<Addition, Product, range>
    Addition  <= Product |% "+"

    Grammar   <- Addition+

    // stores: vector< variant<range, Product, Addition> >
    // creates:
    //     class Product {
    //          vector<range> value_;
    //     }
    //     class Addition {
    //          vector<variant<range, Product>> value_;
    //     }
    // parses: 4 + 2
    // as:     [ Addition[4, 2] ]
    // parses: 4
    // as:     [ 4 ]
    // parses: 4 7
    // as:     [ 4, 7 ]
    // parses: 4 + 2 * 7
    // as:     [ Addition[4, Product[2, 7]] ]
EOF

%a(href=hash.html) previous | " | " | %a(href=inheritence.html) next
