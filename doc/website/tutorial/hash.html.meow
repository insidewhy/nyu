!html
head {
    %title nyu - PEG based parser generator tutorial
    link(rel=stylesheet, type=text/css, href=../css/global.css)
}

!body

%h1 Tutorial - Hashed Container AST nodes

%pre <<EOF
    @grammar hash

    Id <- [a-zA-Z]+

    // (KeyPair <- Id "=" Id) would store tuple<string, string> but since
    // the first identifier begins with "#" then key_value<string, string>
    // is stored.
    KeyPair <- #Id "=" Id

    // (P % Q) would normally store vector<storage type of P>, but when the
    // storage type of P is key_value<...> then it stores a vector_hash_map.
    // A vector_hash_map stores the order in which items were inserted
    // in addition to a hash index which can be used for fast access to
    // a stored item based on its key. This storage behaviour is the same
    // for all parsers that can store vectors.
    Grammar <- "{" KeyPair % "," "}"

    // Using { key -> value, ... } to represent the hash map type nyu created
    // parses "{ first = hello, second = bye }" as:
    // {
    //     "first" -> "hello",
    //     "second" -> "bye"
    // }
EOF
