include [
    [ "nyah" ]
    [ "nyu" ]
]
module id [
    "nyu"
    "grammar"
]
module {
    "meta": NyuGrammar: (
        [ "nyu" ]
        {
            "Identifier": Rule: (
                empty
                '-'
                Expression: [
                    "nyu"
                    "Identifier"
                ]
            )
            "ScopedIdentifier": Rule: (
                empty
                '-'
                Expression: Join: (
                    [ "Identifier" ]
                    "%+"
                    String: "."
                )
            )
            "ModuleDefinition": Rule: (
                empty
                '-'
                Expression: Sequence: [
                    String: "@module"
                    [ "ScopedIdentifier" ]
                ]
            )
            "NyuGrammar": Rule: (
                empty
                '='
                Expression: Sequence: [
                    String: "@grammar"
                    Prefix: (
                        '#'
                        [ "Identifier" ]
                    )
                    Suffix: (
                        Expression: Sequence: [
                            String: ":"
                            [ "ScopedIdentifier" ]
                        ]
                        '?'
                    )
                    [
                        "nyu"
                        "Grammar"
                    ]
                ]
            )
            "Module": Rule: (
                empty
                '='
                Expression: Sequence: [
                    Prefix: (
                        "#+"
                        Expression: Suffix: (
                            [ "ModuleDefinition" ]
                            '?'
                        )
                    )
                    Suffix: (
                        Expression: OrderedChoice: [
                            [ "NyuGrammar" ]
                            [
                                "nyah"
                                "Class"
                            ]
                        ]
                        '+'
                    )
                ]
            )
            "Include": Rule: (
                empty
                '-'
                Expression: Sequence: [
                    String: "@include"
                    Join: (
                        [ "Identifier" ]
                        "%+"
                        String: "/"
                    )
                ]
            )
            "Grammar": Rule: (
                empty
                '-'
                Expression: Sequence: [
                    Suffix: (
                        [ "Include" ]
                        '*'
                    )
                    Suffix: (
                        [ "Module" ]
                        '+'
                    )
                ]
            )
        }
    )
    "nyah": NyuGrammar: (
        [ "nyu" ]
        {
            "Identifier": Rule: (
                empty
                '-'
                Expression: [
                    "nyu"
                    "Identifier"
                ]
            )
            "ScopedIdentifier": Rule: (
                empty
                '-'
                Expression: Join: (
                    [ "Identifier" ]
                    "%+"
                    String: "."
                )
            )
            "EnumEntry": Rule: (
                empty
                '-'
                Expression: [ "Identifier" ]
            )
            "Enum": Rule: (
                empty
                '='
                Expression: Sequence: [
                    String: "enum"
                    Prefix: (
                        '#'
                        [ "Identifier" ]
                    )
                    String: "{"
                    Suffix: (
                        [ "EnumEntry" ]
                        '*'
                    )
                    String: "}"
                ]
            )
            "AssignExpression": Rule: (
                empty
                '-'
                Expression: [ "ScopedIdentifier" ]
            )
            "Type": Rule: (
                empty
                '-'
                Expression: [ "ScopedIdentifier" ]
            )
            "Attribute": Rule: (
                empty
                '='
                Expression: Sequence: [
                    Prefix: (
                        '#'
                        [ "Identifier" ]
                    )
                    String: ":"
                    [ "Type" ]
                ]
            )
            "AssignedAttribute": Rule: (
                empty
                '='
                Expression: Sequence: [
                    Prefix: (
                        '#'
                        [ "Identifier" ]
                    )
                    String: ":"
                    String: "="
                    [ "AssignExpression" ]
                ]
            )
            "Class": Rule: (
                empty
                '='
                Expression: Sequence: [
                    String: "class"
                    Prefix: (
                        '#'
                        [ "Identifier" ]
                    )
                    String: "{"
                    Suffix: (
                        Expression: OrderedChoice: [
                            [ "Attribute" ]
                            [ "AssignedAttribute" ]
                            [ "Enum" ]
                        ]
                        '*'
                    )
                    String: "}"
                ]
            )
        }
    )
    "NyuRule": Class: {
        "Status": Enum: [
            "UNKNOWN"
            "NORMAL"
            "HASHED"
            "NODE"
        ]
        "status_": AssignedAttribute: [
            "Status"
            "UNKNOWN"
        ]
    }
    "nyu": NyuGrammar: (
        empty
        {
            "Spacing": Rule: (
                empty
                '-'
                Expression: Suffix: (
                    Expression: OrderedChoice: [
                        "\s"
                        Joined: [
                            String: "//"
                            Suffix: (
                                Expression: Prefix: (
                                    '!'
                                    "\n"
                                )
                                '*'
                            )
                            "\n"
                        ]
                    ]
                    '+'
                )
            )
            "AnyCharacter": Rule: (
                empty
                '-'
                Expression: String: "."
            )
            "CharacterRange": Rule: (
                empty
                '='
                Expression: Joined: [
                    String: "["
                    Suffix: (
                        Expression: OrderedChoice: [
                            Joined: [
                                CharacterRange: [ "\\" ]
                                CharacterRange: [
                                    "\\"
                                    "\]"
                                    's'
                                    'S'
                                    'n'
                                    'N'
                                    't'
                                    'T'
                                    'w'
                                    'W'
                                ]
                            ]
                            Expression: Joined: [
                                '.'
                                String: "-"
                                '.'
                            ]
                            '.'
                        ]
                        '*'
                    )
                    String: "]"
                ]
            )
            "Escape": Rule: (
                empty
                '-'
                Expression: Joined: [
                    CharacterRange: [ "\\" ]
                    CharacterRange: [
                        's'
                        'S'
                        'n'
                        'N'
                        't'
                        'T'
                        'w'
                        'W'
                        '.'
                        '"'
                        '\''
                        '&'
                        '!'
                        '+'
                        '*'
                        "\\"
                    ]
                ]
            )
            "String": Rule: (
                empty
                '='
                Expression: OrderedChoice: [
                    Joined: [
                        String: "\""
                        Suffix: (
                            Expression: OrderedChoice: [
                                [ "Escape" ]
                                Prefix: (
                                    '!'
                                    String: "\""
                                )
                            ]
                            "^*"
                        )
                        String: "\""
                    ]
                    Joined: [
                        String: "'"
                        Suffix: (
                            Expression: OrderedChoice: [
                                [ "Escape" ]
                                Prefix: (
                                    '!'
                                    String: "'"
                                )
                            ]
                            "^*"
                        )
                        String: "'"
                    ]
                ]
            )
            "Identifier": Rule: (
                empty
                '-'
                Expression: Joined: [
                    CharacterRange: [
                        (
                            'a'
                            'z'
                        )
                        (
                            'A'
                            'Z'
                        )
                        '_'
                    ]
                    Suffix: (
                        CharacterRange: [
                            (
                                'a'
                                'z'
                            )
                            (
                                'A'
                                'Z'
                            )
                            (
                                '0'
                                '9'
                            )
                            '_'
                        ]
                        '+'
                    )
                ]
            )
            "ScopedIdentifier": Rule: (
                empty
                '-'
                Expression: Join: (
                    [ "Identifier" ]
                    "%+"
                    String: "::"
                )
            )
            "Primary": Rule: (
                empty
                '-'
                Expression: OrderedChoice: [
                    [ "String" ]
                    [ "CharacterRange" ]
                    [ "Escape" ]
                    [ "AnyCharacter" ]
                    Sequence: [
                        [ "ScopedIdentifier" ]
                        Prefix: (
                            "&!"
                            String: "<"
                        )
                    ]
                    Sequence: [
                        String: "("
                        [ "Expression" ]
                        String: ")"
                    ]
                ]
            )
            "Suffix": Rule: (
                empty
                '='
                Expression: Sequence: [
                    [ "Primary" ]
                    Suffix: (
                        Expression: OrderedChoice: [
                            String: "^+"
                            String: "^*"
                            CharacterRange: [
                                '?'
                                '*'
                                '+'
                            ]
                            String: "|+"
                            String: "|?"
                        ]
                        "|?"
                    )
                ]
            )
            "Prefix": Rule: (
                empty
                '='
                Expression: Sequence: [
                    Suffix: (
                        Expression: OrderedChoice: [
                            String: "&!"
                            String: "#+"
                            CharacterRange: [
                                '&'
                                '!'
                                '#'
                            ]
                        ]
                        "|?"
                    )
                    [ "Suffix" ]
                ]
            )
            "Join": Rule: (
                empty
                '='
                Expression: Sequence: [
                    [ "Prefix" ]
                    Expression: OrderedChoice: [
                        String: "^%"
                        String: "%+"
                        String: "%"
                        String: "|%"
                        String: "|^%"
                    ]
                    [ "Prefix" ]
                ]
            )
            "Joined": Rule: (
                empty
                '='
                Expression: Join: (
                    Expression: OrderedChoice: [
                        [ "Join" ]
                        [ "Prefix" ]
                    ]
                    "|%"
                    String: "^"
                )
            )
            "Sequence": Rule: (
                empty
                '='
                Expression: Suffix: (
                    [ "Joined" ]
                    "|+"
                )
            )
            "OrderedChoice": Rule: (
                empty
                '='
                Expression: Join: (
                    [ "Sequence" ]
                    "|%"
                    String: "/"
                )
            )
            "Expression": Rule: (
                empty
                '='
                Expression: [ "OrderedChoice" ]
            )
            "Rule": Rule: (
                [ "NyuRule" ]
                '='
                Expression: Sequence: [
                    Prefix: (
                        '#'
                        [ "Identifier" ]
                    )
                    String: "<"
                    Suffix: (
                        [ "ScopedIdentifier" ]
                        '?'
                    )
                    CharacterRange: [
                        '-'
                        '='
                    ]
                    [ "Expression" ]
                ]
            )
            "Grammar": Rule: (
                empty
                '-'
                Expression: Suffix: (
                    [ "Rule" ]
                    '+'
                )
            )
        }
    )
}
